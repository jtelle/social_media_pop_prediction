import subprocess
import sys
import os


def run_script(script_path):
    """
    Runs a Python script as a subprocess, streaming its output directly to the console.
    """
    print(f"\n--- Running {script_path} ---")
    try:
        # Use sys.executable to ensure the script runs with the same Python interpreter
        # as the current script.
        # stdout=sys.stdout and stderr=sys.stderr will stream output directly
        # as it is generated by the subprocess.
        # We remove capture_output=True as it conflicts with streaming.
        result = subprocess.run(
            [sys.executable, script_path],
            check=True,
            stdout=sys.stdout,  # Direct subprocess's standard output to parent's standard output
            stderr=sys.stderr   # Direct subprocess's standard error to parent's standard error
        )
        # We no longer need to print result.stdout or result.stderr here,
        # as the output is already streamed in real-time by the lines above.
        print(f"--- {script_path} completed successfully ---")
    except subprocess.CalledProcessError as e:
        print(f"Error running {script_path}:")
        # When streaming stdout/stderr, e.stdout and e.stderr might be empty or None.
        # The key is that the error output itself would have been streamed.
        print(f"Process exited with non-zero code {e.returncode}.")
        print(f"--- {script_path} failed ---")
        sys.exit(1)  # Exit if any script fails


def main():
    """
    Main function to orchestrate the ML pipeline.
    """
    # Define the paths to your scripts relative to the main.py script
    # If main.py is in the root, and scripts are in 'src/'
    current_dir = os.path.dirname(os.path.abspath(__file__))
    data_preparation_script = os.path.join(
        current_dir, 'src', 'data_preparation.py')
    model_training_script = os.path.join(
        current_dir, 'src', 'model_training.py')

    print("--- Starting the Full ML Pipeline ---")

    # Step 1: Run data_preparation.py
    run_script(data_preparation_script)

    # Step 2: Run model_training.py
    run_script(model_training_script)

    print("\n--- Full ML Pipeline Completed Successfully ---")


if __name__ == '__main__':
    main()
